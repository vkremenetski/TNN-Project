class Tensor:
	def __init__(self, index_dimensions):
		#Recursively creates an zero tensor given a list of index dimensions (**No vector/dual distinction**)
		#Early on, I dabbled with a few ways of representing them and I settled on Tensors as Trees with Scalars as Leaves
		"""For convenience, I've made it so that vectors are the lowest-ranking Tensor Objects possible.
		For scalars to occupy that role would have required a bunch of redundant variables added to each object and generally annoying modifications.
		Things work pretty well as it stands this way, I think."""
		self.rank = len(index_dimensions)
		self.IndexDim = index_dimensions
		if self.rank == 1:
			self.subTensors = [0 for x in range(self.IndexDim[0])]
		else:
			self.subTensors = [Tensor(self.IndexDim[1:]) for x in range(self.IndexDim[0])]
	def __repr__(self):
		return "Tensor(" + str(self.IndexDim) + ")"
	def get_rank(self):
		return self.rank
	def get_element(self, indices):
		#Since the tensor object is defined recursively, possible to get non-scalar elements as well
		if len(indices)<=self.rank:
			if(self.IndexDim==[] or indices ==[] or indices[0]<=self.IndexDim[0]):
				if(len(indices)==1):
					return self.subTensors[indices[0]]
				else:
					return self.subTensors[indices[0]].get_element(indices[1:])
			else:
				raise IndexError("get_element: Value of requested index cannot exceed index dimension") #Identifying which method is causing trouble
		else:
			raise IndexError("get_element: Number of indices cannot exceed rank of Tensor")
	def set_element(self, indices, new):
		#For reasons stated above, possible to set subTensor elements as well
		if len(indices)<=self.rank:
			if(self.IndexDim==[] or indices ==[] or indices[0]<=self.IndexDim[0]):
				if(len(indices)==1):
					self.subTensors[indices[0]] = new
				else:
					self.subTensors[indices[0]].set_element(indices[1:],new)
			else:
				raise IndexError("set_element: Value of requested index cannot exceed index dimension")
		else:
			raise IndexError("set_element: Number of indices cannot exceed rank of Tensor")
	def __add__(self, other):
		assert isinstance(other,Tensor)
		assert self.IndexDim==other.IndexDim
		result = Tensor(self.IndexDim)
		result.subTensors = [self.subTensors[i]+other.subTensors[i] for i in range(self.IndexDim[0])]
		return result
	def scalar_product(self, scalar):
		#Obviously "scalar" must be a scalar, not sure how to check directly though, since it might be complex, which doesn't fit into the primitive types
		result = Tensor(self.IndexDim)
		if self.rank==1:
			result.subTensors = [(scalar*x) for x in self.subTensors]
		else:
			result.subTensors = [x.scalar_product(scalar) for x in self.subTensors]
		return result
	def tensor_product(self,other):
		assert isinstance(other,Tensor)
		result = Tensor(self.IndexDim+other.IndexDim)
		if(self.rank==1):
			result.subTensors = [other.scalar_product(x) for x in self.subTensors]
		else:
			result.subTensors = [x.tensor_product(other) for x in self.subTensors]
		return result
